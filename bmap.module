<?php

define('__BMAP_CONTAINER_ID__', 'BMapContainer');

/**
 * Implements hook_menu().
 */
function bmap_menu() {
  $items = array();
  $items['admin/config/user-interface/bmap'] = array(
    'title' => 'Bmap',
    'description' => 'Bmap settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bmap_settings'),
    'access arguments' => array('administer bmap'),
    'file' => 'bmap.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/structure/bmap'] = array(
    'title' => 'Bmap',
    'description' => 'Manage Bmap',
    'page callback' => 'bmap_manage',
    'access arguments' => array('administer bmap'),
    'file' => 'bmap.admin.inc',
  );
  $items['bmap/add'] = array(
    'title' => 'Add Bmap',
    'page callback' => 'bmap_add',
    'access arguments' => array('add bmap'),
    'file' => 'bmap.admin.inc',
  );
  $items['admin/structure/bmap/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['bmap/%bmap'] = array(
    'title' => 'Bmap',
    'page callback' => 'bmap_page_view',
    'page arguments' => array(1),
    'access arguments' => array('view bmap'),
    'file' => 'bmap.admin.inc',
  );
  $items['bmap/%bmap/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['bmap/%bmap/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'bmap_page_edit',
    'page arguments' => array(1),
    'access arguments' => array('edit bmap'),
    'weight' => 0,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'bmap.admin.inc',
  );
  $items['bmap/%bmap/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bmap_delete_confirm_form', 1),
    'access arguments' => array('delete bmap'),
    'weight' => 1,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'file' => 'bmap.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function bmap_permission() {
  return array(
    'administer bmap' => array(
      'title' => t('Administer Bmaps'),
      'description' => t('Administer entitiy bmaps.'),
    ),
    'add bmap' => array(
      'title' => t('Add Bmap'),
      'description' => t('Add entitiy bmaps.'),
    ),
    'edit bmap' => array(
      'title' => t('Edit All Bmaps'),
      'description' => t('Edit all entitiy bmaps.'),
    ),
    'view bmap' => array(
      'title' => t('View All Bmaps'),
      'description' => t('View entitiy bmaps.'),
    ),
    'delete bmap' => array(
      'title' => t('Delete All Bmaps'),
      'description' => t('Delete all entitiy bmaps.'),
    ),
  );
}

/**
 * Implements hook_entity_info().
 */
function bmap_entity_info() {
  $return = array(
    'bmap' => array(
      'label' => t('Bmap'),
      'plural label' => t('Bmaps'),
      'description' => t('Bmap entity.'),
      'entity class' => 'Bmap',
      'controller class' => 'EntityAPIController',
      'base table' => 'bmap',
      'fieldable' => TRUE,
      'view modes' => array(
        'full' => array(
          'label' => t('Bmap'),
          'custom settings' => FALSE,
        ),
      ),
      'entity keys' => array(
        'id' => 'bid',
      ),
      'bundles' => array(
        'bmap' => array(
          'label' => t('Bmap'),
          'admin' => array(
            'path' => 'admin/structure/bmap',
            'access arguments' => array('administer bmap'),
          ),
        ),
      ),
      'uri callback' => 'entity_class_uri',
      'access callback' => 'bmap_access',
      'module' => 'bmap',
      'metadata controller class' => 'BmapMetadataController'
    ),
  );
  return $return;
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function bmap_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // Add action link to 'node/add' on 'admin/content' page.
  if ($root_path == 'admin/structure/bmap') {
    $item = menu_get_item('bmap/add');
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}

/**
 * Implements hook_admin_paths().
 */
function bmap_admin_paths() {
  if (variable_get('node_admin_theme')) {
    $paths = array(
      'bmap/add' => TRUE,
      'bmap/*' => TRUE,
      'bmap/*/edit' => TRUE,
      'bmap/*/delete' => TRUE,
    );
    return $paths;
  }
}

/**
 * Implements hook_views_api().
 */
function bmap_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'bmap') . '/views',
  );
}

/**
 * Adds our theme specificiations to the Theme Registry.
 */
function bmap_theme($existing, $type, $theme, $path) {
  return array(
    'bmap' => array(
      'variables' => array('element' => NULL, 'bmap' => NULL),
      'template' => 'bmap'
    ),
    'bmap_field_map' => array(
      'variables' => array('points' => NULL),
      'template' => 'bmap_field_map'
    ),
  );
}

/**
 * Determines whether the given user has access to a bmap.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'
 *   or just 'edit' (being the same as 'create' or 'update').
 * @param $bmap
 *   Optionally to check access for. If nothing is given, access for
 *   all bmaps is determined.
 * @param $account
 *   The user to check for. Leave it to NULL to check for the global user.
 * @return boolean
 *   Whether access is allowed or not.
 */
function bmap_access($op, $bmap = NULL, $account = NULL) {
  if (user_access('administer bmap', $account)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Fetch a bmap object.
 *
 * @param $bid
 *   Integer specifying the bmap id.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   A fully-loaded $bmap object or FALSE if it cannot be loaded.
 *
 * @see bmap_load_multiple()
 */
function bmap_load($bid, $reset = FALSE) {
  $bmaps = bmap_load_multiple(array($bid), array(), $reset);
  return reset($bmaps);
}

/**
 * Load multiple bmaps based on certain conditions.
 *
 * @param $bids
 *   An array of bmap IDs.
 * @param $conditions
 *   An array of conditions to match against the {bmap} table.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   An array of bmap objects, indexed by pid.
 *
 * @see entity_load()
 * @see bmap_load()
 */
function bmap_load_multiple($bids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('bmap', $bids, $conditions, $reset);
}

/**
 * Deletes a bmap.
 */
function bmap_delete(Bmap $bmap) {
  $bmap->delete();
}

/**
 * Delete multiple bmap.
 *
 * @param $bids
 *   An array of bmap IDs.
 */
function bmap_delete_multiple(array $bids) {
  entity_get_controller('bmap')->delete($bids);
}

/**
 * Create a new bmap object.
 */
function bmap_create(array $values) {
  return new Bmap($values);
}

/**
 * Saves a bmap to the database.
 *
 * @param $bmap
 *   The bmap object.
 */
function bmap_save(Bmap $bmap) {
  return $bmap->save();
}

/**
 * The class used for bamp entities.
 */
class Bmap extends Entity {

  /**
   * The bmap id.
   *
   * @var integer
   */
  public $bid;

  /**
   * The bmap x.
   *
   * @var float
   */
  public $x;

  /**
   * The bmap y.
   *
   * @var float
   */
  public $y;

  public function __construct($values = array()) {
    parent::__construct($values, 'bmap');
  }

  protected function defaultLabel() {
    return $this->path;
  }

  protected function defaultUri() {
    return array('path' => 'bmap/'.$this->bid);
  }  
}

/**
 * The Controller for Bmap entities
 */
class BmapController extends EntityAPIController {
  public function __construct($entityType) {
    parent::__construct($entityType);
  }

  /**
   * Create a bmap - we first set up the values that are specific
   * to our bmap schema but then also go through the EntityAPIController
   * function.
   * 
   * @param $type
   *   The machine-readable type of the bmap.
   *
   * @return
   *   A bmap object with all default fields initialized.
   */
  public function create(array $values = array()) {
    // Add values that are specific to our Bmap
    $values += array(
      'bid' => '',
    );
    
    $bmap = parent::create($values);
    return $bmap;
  }
}

/**
 * The bmap edit form.
 */
function bmap_form($form, &$form_state, $bmap) {
  // Save the bmap for later, incase we need it.
  $form['#bmap'] = $bmap;
  $form_state['bmap'] = $bmap;
  $form['bid'] = array(
    '#type' => 'value',
    '#value' => isset($bmap->bid) ? $bmap->bid : NULL,
  );
  // add form items
  bmap_form_items($form, $bmap);
  // Add the field related form elements.
  field_attach_form('bmap', $bmap, $form, $form_state);
  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#weight' => 40
  );
  if (!empty($bmap->bid)) {
    $form['actions']['delete'] = array(
      '#type' => 'submit',
      '#value' => t('Delete'),
      '#weight' => 45,
      '#limit_validation_errors' => array(),
      '#submit' => array('bmap_form_submit_delete'),
    );    
  }
  $form['#validate'][] = 'bmap_form_validate';
  $form['#submit'][] = 'bmap_form_submit';
  bmap_form_attached($form, $bmap);
  return $form;
}

/**
 * Bmap attached form js, css.
 */
function bmap_form_items(&$form, Bmap $bmap) {
  $form['bmap_info'] = array(
    '#markup' => '<div> You can get X/Y from <a target="_blank" href="http://api.map.baidu.com/lbsapi/getpoint/index.html">Baidu Map</a></div>',
    '#weight' => -30,
  ); 
  $form['bmap_x'] = array(
    '#type' => 'textfield',
    '#title' => t('X'),
    '#maxlength' => 60,
    '#default_value' => !empty($bmap->x) ? $bmap->x : '',
    '#attributes' => array('class' => array('bmap_form_x')),
    '#weight' => -20,
    '#required' => TRUE,
  );
  $form['bmap_y'] = array(
    '#type' => 'textfield',
    '#title' => t('Y'),
    '#maxlength' => 60,
    '#default_value' => !empty($bmap->y) ? $bmap->y : '',
    '#attributes' => array('class' => array('bmap_form_y')),
    '#weight' => -10,
    '#required' => TRUE,
  );
  $form['bmap_get_xy'] = array(
    '#type' => 'submit',
    '#value' => t('Get X/Y by address'),
    '#executes_submit_callback' => FALSE,
    '#limit_validation_errors' => array(),
    '#ajax' => array(
      'callback' => 'bmap_get_xy_callback',
      'progress' => array(
        'type' => 'throbber',
        'message' => '',
      ), 
    ),
    '#weight' => 0,
  );
  $form['bmap_preview'] = array(
    '#type' => 'submit',
    '#value' => t('Preview'),
    '#executes_submit_callback' => FALSE,
    '#limit_validation_errors' => array(),
    '#ajax' => array(
      'callback' => 'bmap_preview_callback',
      'progress' => array(
        'type' => 'throbber',
        'message' => '',
      ),
    ),
    '#weight' => 30,
  );
  $form['bmap_map'] = array(
    '#markup' => '<div style="width:'.variable_get('bmap_preview_width', '100%').';height:'.variable_get('bmap_preview_height', '500px').';border:#ccc solid 1px;" id="'.__BMAP_CONTAINER_ID__.'"></div>',
    '#weight' => 35,
  );
}

function bmap_form_attached(&$form, Bmap $bmap) {
  $form['#attached']['css'] = array(
    'http://api.map.baidu.com/library/SearchInfoWindow/1.5/src/SearchInfoWindow_min.css' => array('type' => 'external'),
    drupal_get_path('module', 'bmap').'/bmap.css' => array('type' => 'file'),
  );
  $form['#attached']['js'] = array(
    'http://api.map.baidu.com/api?v=1.5&ak='.variable_get('bmap_key', '') => array('type' => 'external'),
    'http://api.map.baidu.com/library/SearchInfoWindow/1.5/src/SearchInfoWindow_min.js' => array('type' => 'external'),
    array('data' => array('bmap' => array('container' => __BMAP_CONTAINER_ID__)), 'type' => 'setting'),
    array('data' => drupal_get_path('module', 'bmap').'/bmap.js', 'scope' => 'footer')
  );
  if (isset($bmap->bid)) {
    $data = array(
      array(
        'x' => $bmap->x,
        'y' => $bmap->y,
        'name' => $bmap->field_bmap_name['und'][0]['value'],
        'description' => $bmap->field_bmap_description['und'][0]['value'],
      )
    );
    $form['#attached']['js'][] = array('data' => array('bmap' => array('data' => $data)), 'type' => 'setting');
    $form['#attached']['js'][] = array('data' => 'jQuery(document).ready(function () { Drupal.bmap.phpSetData();Drupal.bmap.make(); });', 'type' => 'inline');
  }
}

/**
 * Bmap form validate handler.
 */
function bmap_form_validate($form, &$form_state) {
  $bmap = $form_state['bmap'];
  // Notify field widgets to validate their data.
  field_attach_form_validate('bmap', $bmap, $form, $form_state);
  if (!is_numeric($form_state['values']['bmap_x'])) {
    form_set_error('bmap_x', t('X must be a number.'));
  }
  if (!is_numeric($form_state['values']['bmap_y'])) {
    form_set_error('bmap_y', t('Y must be a number.'));
  }
}

/**
 * Bmap form submit handler.
 */
function bmap_form_submit($form, &$form_state) {
  $bmap = &$form_state['bmap'];
  $bmap->bid = $form_state['values']['bid'];
  $bmap->x = $form_state['values']['bmap_x'];
  $bmap->y = $form_state['values']['bmap_y'];
  // Notify field widgets.
  field_attach_submit('bmap', $bmap, $form, $form_state);
  // Save the bmap
  bmap_save($bmap);
  drupal_set_message(t('Bmap saved.'));
  $form_state['redirect'] = 'bmap/'.$bmap->bid;
}

/**
 * Bmap form submit handler for the delete button.
 */
function bmap_form_submit_delete($form, &$form_state) {
  $bmap = $form_state['bmap'];
  $form_state['redirect'] = 'bmap/'.$bmap->bid.'/delete';
}

/**
 * Bmap form get x/y handler.
 */
function bmap_get_xy_callback($form, $form_state) {
  $commands[] = array(
    'command' => 'bmapGetXY',
    'data' => $form_state['values']['field_bmap_address']['und'][0]['value'],
  );
  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Bmap form preview handler.
 */
function bmap_preview_callback($form, $form_state) {
  $data = array(
    array(
      'x' => $form_state['values']['bmap_x'],
      'y' => $form_state['values']['bmap_y'],
      'name' => $form_state['values']['field_bmap_name']['und'][0]['value'],
      'description' => $form_state['values']['field_bmap_description']['und'][0]['value'],
    )
  );
  $commands[] = array(
    'command' => 'bmapPreview',
    'data' => $data,
  );
  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Load JS, CSS
 */
function bmap_load_js_css() {
  drupal_add_library('system', 'drupal.ajax');
  $path = drupal_get_path('module', 'bmap');
  drupal_add_css('http://api.map.baidu.com/library/SearchInfoWindow/1.5/src/SearchInfoWindow_min.css', 'external');
  drupal_add_css($path.'/bmap.css');
  drupal_add_js('http://api.map.baidu.com/api?v=1.5&ak='.variable_get('bmap_key', ''), 'external');
  drupal_add_js('http://api.map.baidu.com/library/SearchInfoWindow/1.5/src/SearchInfoWindow_min.js', 'external');
  drupal_add_js(array('bmap' => array('container' => __BMAP_CONTAINER_ID__)), 'setting');
  drupal_add_js($path.'/bmap.js', array('scope' => 'footer'));
}